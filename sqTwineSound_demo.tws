(dp0
S'buildDestination'
p1
V/Users/Tory/Dropbox/Twine/projects/gtSoundPlus_demo.html
p2
sS'saveDestination'
p3
V/Users/Tory/Dropbox/Twine/projects/gtSoundPlus_demo_sugarcube.tws
p4
sS'metadata'
p5
(dp6
sS'target'
p7
S'sugarcube_v101'
p8
sS'storyPanel'
p9
(dp10
S'widgets'
p11
(lp12
(dp13
S'selected'
p14
I00
sS'pos'
p15
(lp16
I15
aI7
asS'passage'
p17
(itiddlywiki
Tiddler
p18
(dp20
S'text'
p21
V<<set $sound = "Yes">>\u005c\u000a<<set $currentLoops = []>>\u005c\u000a<<set $background_music = "accordion.mp3">>\u005c\u000a<<set $footsteps = "footsteps.mp3">>\u005c\u000a<h2>Welcome to the sub-Q Sound Macro Suite Demo</h2>\u005c\u000a<h3>Macros</h3>\u005c\u000a<ul><li>[[playsound]], [[updatevolume|playsound]]</li>\u000a<li>[[pausesound]], [[pauseallsound|pausesound]]</li>\u000a<li>[[loopsound]], [[unloopsound|loopsound]], [[fadeinsound|loopsound]], [[fadeinsounds|loopsound]], [[fadeoutsound|loopsound]], [[fadeoutsounds|loopsound]], [[playsounds|loopsound]], [[stopsound|loopsound]], [[stopallsound|loopsound]]</li>\u000a<li>[[quieter]], [[louder|quieter]]</li>\u000a<li>[[jumpscare]]</li></ul>\u000a<h3>Overview</h3>\u005c\u000aThis suite builds on Leon Arnott's incredibly rad HTML5 sound macros by adding\u000a<ul><li>story-wide volume control</li>\u000a<li>individual volume control</li>\u000a<li>seamless loops (with crossfade)</li>\u000a<li>fade duration control</li>\u000a<li>the ability to start multiple audio tracks at once</li></ul>\u005c\u000a\u000aA macro is a piece of code you can insert in a Twine passage like so:\u000a{{{<<playsound $thisSound>>}}}\u000a\u000aThis demo shows what the sub-Q suite of sound macros can be used to do.\u000a\u000a<h3>Quick Reference</h3>\u005c\u000a<<display "questions">>\u005c\u000a\u000a<h4>Handy JavaScript tools</h4>\u005c\u000a<ul><li>Minimize a beautiful script for download efficiency: <a href=" http://jscompress.com/" target="_blank">JS Compress</a></li>\u000a    <li>Beautify a minimized script (though this won't restore descriptive variable names): <a href="http://jsbeautifier.org" target="_blank">JS Beautifier</a></li>\u000a     <li>Check a script for common errors: <a href="http://jshint.com/" target="_blank">JS Hint</a></li></ul>\u005c\u000a\u000a<h3>Before We Start</h3>\u005c\u000aIn this demo, I use "clip" and "track" to mean the playback of a specific audio file.\u000a\u000aThese macros recognize the following file formats, but be advised not every format works in every browser: ogg, mp3, wav, and webm.\u000a\u000aIn Sugarcube, you can pass your audio clip name[s] as a string (e.g. "meow.mp3") or a variable (e.g. $meow, assuming you have defined {{{<<set $meow = "meow.mp3">>}}}.) But in Sugarcane and Jonah, the audio clip names must be passed as strings (e.g. "meow.mp3"). You will see both these strings and variables used in the examples.\u000a\u000a&nbsp;&nbsp;Note that, even in Sugarcube, string variables are recommended because they help you do things like this:\u000a\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<set $heartbeat = "heartbeat.mp3">>}}}\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<set $spookyMusic = "spookyMusic.mp3">>}}}\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<set $spookyClips = [$heartbeat, $spookyMusic]>>}}}\u000a&nbsp;&nbsp;&nbsp;&nbsp;...\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<fadeinsounds $spookyClips>>}}}\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<timedcontinue 2s>>}}}\u000a&nbsp;&nbsp;&nbsp;&nbsp;...But then things weren't so scary...\u000a&nbsp;&nbsp;&nbsp;&nbsp;{{{<<fadeoutsounds $spookyClips>>}}}\u000a\u000a(Speaking of, if you'd like the "timedcontinue" macro, it's available in the <a href="http://www.glorioustrainwrecks.com/node/5462" target="_blank">Glorious Trainwrecks Replace Macro Set</a>!)\u000a\u000aHuge thanks to Leon Arnott for founding these sound macros.\u000a\u000aFeel free to save this demo locally and import the HTML into Twine to inspect it. Remember that the JavaScript in this demo and on github is "beautiful," so it's easy to read. Before you paste it into a Twine project, you may want to <a href="http://jscompress.com/" target="_blank">minimize it</a> for efficiency.\u000a\u000aReady? Let's go!\u000a\u000a-> [[Walk through|playsound]] all macros\u000a
p22
sS'title'
p23
VStart
p24
sS'modified'
p25
ctime
struct_time
p26
((I2014
I9
I30
I18
I8
I49
I1
I273
I1
tp27
(dp28
tp29
Rp30
sS'tags'
p31
(lp32
sS'created'
p33
g26
((I2014
I9
I25
I13
I11
I20
I3
I268
I1
tp34
(dp35
tp36
Rp37
sbsa(dp38
g14
I00
sg15
(lp39
I10
aI150
asg17
(itiddlywiki
Tiddler
p40
(dp41
g21
VsqTwineSound Macro Suite Demo\u000afor v. 0.8.0
p42
sg23
VStoryTitle
p43
sg25
g26
((I2014
I10
I1
I0
I33
I4
I2
I274
I1
tp44
(dp45
tp46
Rp47
sg31
(lp48
sg33
g26
((I2014
I9
I25
I13
I11
I20
I3
I268
I1
tp49
(dp50
tp51
Rp52
sbsa(dp53
g14
I00
sg15
(lp54
I10
aI290
asg17
(itiddlywiki
Tiddler
p55
(dp56
g21
V<<set $background_music = "accordion.mp3">>\u005c\u000a\u000asub-Q development\u000aand demo\u000aby Tory Hoke\u000a<a href="http://www.twitter.com/toryhoke" target="_blank">@toryhoke</a>\u000a<a href="http://www.toryhoke.com">toryhoke.com</a>\u000a\u000aBased on sound macros\u000aby Leon Arnott\u000aof <a href="http://www.glorioustrainwrecks.com" target="_blank">Glorious Trainwrecks</a>\u000a\u000a\u000aA little background music\u000a<p align="right"><<display "common controls">></p>\u000a\u000a[[Audio attributions|audio attribution]]\u000a\u000aDeveloped for\u000aTwine 1.4.2\u000aSugarcube
p57
sg23
VStoryAuthor
p58
sg25
g26
((I2014
I10
I1
I0
I2
I43
I2
I274
I1
tp59
(dp60
tp61
Rp62
sg31
(lp63
sg33
g26
((I2014
I9
I25
I13
I11
I20
I3
I268
I1
tp64
(dp65
tp66
Rp67
sbsa(dp68
g14
I00
sg15
(lp69
I593
aI23
asg17
(itiddlywiki
Tiddler
p70
(dp71
g21
V<<set $currentLoops = []>>\u005c\u000a<<set $background_music = "accordion.mp3">>\u005c\u000a<<set $footsteps = "footsteps.mp3">>\u005c\u000a[[<- loopsound, fadesound etc.|loopsound]]<div align="right">[[jumpscare]]</div>\u005c\u000a\u000a<h2>quieter, louder</h2>\u005c\u000a\u000a<<display "common controls">>\u000a\u000aThese macros adjust the overall volume of the story. The relative proportions of individual audio clips will be preserved.\u000a\u000aThese macros do NOT change the system volume. If the reader has their system volume down to two bars, these controls adjust the volume within that two-bar range.\u000a\u000aThis means the reader can have rainymoods.com playing in one tab at a certain volume, and then your story playing in another tab at a different volume.\u000a\u000a<h3>{{{<<quieter>>}}}</h3>\u005c\u000aReduces the story's overall volume by 1/10th of the reader's current system volume.\u000a\u000a<h3>{{{<<louder>>}}}</h3>\u005c\u000aIncreases the story's overally volume by 1/10th of the reader's current system volume.\u000a\u000aTogether, these options create a 10-unit range for the reader to adjust your story's volume (within the reader's system volume.)\u000a\u000a[[<- loopsound, fadesound etc.|loopsound]]<div align="right">[[jumpscare]]</div>
p72
sg23
Vquieter
p73
sg25
g26
((I2014
I10
I1
I0
I23
I36
I2
I274
I1
tp74
(dp75
tp76
Rp77
sg31
(lp78
sg33
g26
((I2014
I9
I25
I13
I39
I9
I3
I268
I1
tp79
(dp80
tp81
Rp82
sbsa(dp83
g14
I00
sg15
(lp84
I166
aI17
asg17
(itiddlywiki
Tiddler
p85
(dp86
g21
V<<set $soft_meow = "soft_meow.mp3">>\u005c\u000a<<set $background_music = "accordion.mp3">>\u005c\u000a[[<- Back to start|Start]]<div align="right">[[pausesound, stopsound ->|pausesound]]</div>\u005c\u000a\u000a<h2>playsound, updatevolume</h2>\u005c\u000a\u000aPlay Cat Meow at full available volume: <<button "|>">><<stopsound $soft_meow>><<playsound $soft_meow 1.0>><</button>>\u000aPlay Cat Meow at 1/2 volume: <<button "|>">><<stopsound $soft_meow>><<playsound $soft_meow 0.5>><</button>>\u000aPlay Cat Meow at 1/4 volume, with fade in, on loop: <<button "|>">><<stopsound $soft_meow>><<fadeinsound $soft_meow 0.25>><</button>>\u000aStop All Sound: <<button "[]">><<stopallsound>><</button>>\u000a\u000a<h3>{{{<<playsound "introMusic.mp3" (0.5 200 true)>>}}}</h3>\u005c\u000a{{{<<playsound>>}}} lets you do a little bit of sound mixing.\u000a\u000aThe parameters (in this order, please):\u000a\u000a<ul><li>REQUIRED: name of the sound clip to play</li>\u000a<li>OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)</li>\u000a<li>OPTIONAL: number of milliseconds to overlap/crossfade the loop (0 ms by default)</li>\u000a<li>OPTIONAL: true if you'd like to loop, false if no</li></ul>\u005c\u000a\u000aSo this plays a clip once, no fade, at full global volume:\u000a\u000a    {{{<<playsound $walla">>}}}\u000a\u000aThis fades in a quiet background $walla that will loop and crossfade with 2000 ms (2 seconds) of overlap:\u000a \u000a    {{{<<playsound $walla 0.2 2000 true>>}}}\u000a\u000a This plays $meow once, no fade, at loudest available volume:\u000a  \u000a    {{{<<playsound $meow 1.0>>}}}\u000a\u000aThe last used volume will be remembered when you stop and restart the clip.\u000a\u000aNOTE: It's best practice to stop a sound before attempting to play it again. Any attempt to play a sound already playing is ignored.\u005c\u000a\u000a<h3>{{{<<updatevolume $backgroundMusic 0.5>>}}}</h3>\u005c\u000aGiven a decimal between 0.0 and 1.0, update the clip's volume proportion and the clip's actual volume.\u000a\u000aLoop Music at 0.50 volume: <<button "|>">><<fadeinsound $background_music 0.50>><</button>>\u000aChange volume to 0.10 volume: <<button "Volume 0.10">><<updatevolume $background_music 0.10>><</button>>\u000aChange volume to 0.90 volume: <<button "Volume 0.90">><<updatevolume $background_music 0.90>><</button>>\u000aStop Music: <<button "[]">><<stopsound $background_music>><</button>>\u000a\u000a[[<- Back to start|Start]]<div align="right">[[pausesound, stopsound ->|pausesound]]</div>\u005c
p87
sg23
Vplaysound
p88
sg25
g26
((I2014
I10
I1
I0
I19
I11
I2
I274
I1
tp89
(dp90
tp91
Rp92
sg31
(lp93
sg33
g26
((I2014
I9
I25
I13
I42
I9
I3
I268
I1
tp94
(dp95
tp96
Rp97
sbsa(dp98
g14
I00
sg15
(lp99
F307.0
aI20
asg17
(itiddlywiki
Tiddler
p100
(dp101
g21
V<<set $currentLoops = []>>\u005c\u000a<<set $background_music = "accordion.mp3">>\u005c\u000a<<set $footsteps = "footsteps.mp3">>\u005c\u000a[[<- playsound|playsound]]<div align="right">[[loopsound, fadesound, etc. ->|loopsound]]</div>\u005c\u000a\u000a<h2>pausesound, stopsound</h2>\u005c\u000a\u000a<<display "common controls">>\u000a\u000a<h3>{{{<<pausesound $background_music>>}}}</h3>\u005c\u000aPauses $background_music at its current location. \u000aUse {{{<<playsound $background_music>>}}} to resume it.\u000a\u000a\u000a<h3>{{{<<stopsound $backgroundMusic>>}}}</h3>\u005c\u000aStop the given sound immediately.\u000aIf the sound is played again, it will play from the beginning.\u000a\u000a\u000a\u000a[[<- playsound|playsound]]<div align="right">[[loopsound, fadesound, etc. ->|loopsound]]</div>\u005c
p102
sg23
Vpausesound
p103
sg25
g26
((I2014
I9
I30
I17
I47
I17
I1
I273
I1
tp104
(dp105
tp106
Rp107
sg31
(lp108
sg33
g26
((I2014
I9
I25
I13
I43
I34
I3
I268
I1
tp109
(dp110
tp111
Rp112
sbsa(dp113
g14
I00
sg15
(lp114
I445
aI20
asg17
(itiddlywiki
Tiddler
p115
(dp116
g21
V<<set $currentLoops = []>>\u005c\u000a<<set $background_music = "accordion.mp3">>\u005c\u000a<<set $footsteps = "footsteps.mp3">>\u005c\u000a[[<- pausesound, stopsound|pausesound]]<div align="right">[[quieter, louder ->|quieter]]</div>\u005c\u000a\u000a<h2>loopsound, unloopsound, fadeinsound, fadeinsounds, fadeoutsound, fadeoutsounds, playsounds, pauseallsound, stopallsound</h2>\u005c\u000a\u000a<<display "single loop controls">>\u000a<<display "multiple loop controls">>\u000a\u000aNote that you must keep track of what's playing--what you want to stop and start--on your own.\u000a\u000a\u000a<h3>{{{<<loopsound "accordion.mp3">>}}}</h3>\u005c\u000aThe parameters (in this order, please):\u000a\u000a<ul><li>REQUIRED: name of the sound clip to loop</li>\u000a<li>OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)</li>\u000a<li>OPTIONAL: number of milliseconds to overlap/crossfade the loop (0 ms by default)</li></ul>\u005c\u000a\u000aStarts playing the given clip on repeat. Note that browsers will not necessarily play looping audio seamlessly.\u000a\u000a<h3>{{{<<unloopsound $footsteps>>}}}</h3>\u005c\u000aLet the given sound stop when it finishes its current loop (so the sound no longer repeats.)\u000a\u000a<h3>{{{<<fadeinsound "footsteps.mp3">>}}}</h3>\u005c\u000aIdentical to loopsound, but performs a fade in over the given overlap period.\u000a\u000a<h3>{{{<<fadeinsounds ["accordion.mp3", "footsteps.mp3"]>>}}}</h3>\u005c\u000aOR IDEALLY\u000a<h3>{{{<<set $spookySounds = [$moodMusic, $footSteps]>>}}}\u000a{{{<<fadeinsounds $spookySounds>>}}}</h3>\u005c\u000a\u000aFade in multiple sounds at once. Previous clip volume and overlap is remembered.\u000a\u000a<h3>{{{<<fadeoutsound $birdsong>>}}}</h3>\u005c\u000aIdentical to stopsound, but fades out the sound over 2 seconds.\u000a\u000a<h3>{{{<<fadeoutsounds ["moodMusic.mp3", "footsteps.mp3"]>>}}}</h3>\u005c\u000a&nbsp;&nbsp;&nbsp;&nbsp;OR IDEALLY\u000a<h3>{{{<<set $spookySounds = [$moodMusic, $footSteps]>>}}}\u000a{{{<<fadeoutsounds $spookySounds>>}}}</h3>\u005c\u000a\u000aFade out multiple sounds at once.\u000a\u000a<h3>{{{<<playsounds ["moodMusic.mp3", "footsteps.mp3"]>>}}}</h3>\u005c\u000a&nbsp;&nbsp;&nbsp;&nbsp;OR IDEALLY\u000a<h3>{{{<<set $spookySounds = [$moodMusic, $footSteps]>>}}}\u000a{{{<<playsounds $spookySounds>>}}}</h3>\u005c\u000a\u000aPlay multiple sounds at once (picking up where we left off)\u000a\u000aThe parameters (in this order, please):\u000a\u000a<ul><li>REQUIRED: list of the sound clips to play</li>\u000a<li>OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)</li>\u000a<li>OPTIONAL: number of milliseconds to overlap/crossfade the loop (0 ms by default)</li>\u000a<li>OPTIONAL: true if you'd like to loop, false if no</li></ul>\u005c\u000a\u000a<h3>{{{<<pauseallsound>>}}}</h3>\u000aPauses all sounds at their current location. \u000a\u000a<h3>{{{<<stopallsound>>}}}</h3>\u000aStops all sounds immediately. If any stopped sound is played again, it will play from the beginning.\u000a\u000a[[<- pausesound, stopsound|pausesound]]<div align="right">[[quieter, louder ->|quieter]]</div>\u005c
p117
sg23
Vloopsound
p118
sg25
g26
((I2014
I10
I1
I0
I22
I23
I2
I274
I1
tp119
(dp120
tp121
Rp122
sg31
(lp123
sg33
g26
((I2014
I9
I25
I13
I44
I13
I3
I268
I1
tp124
(dp125
tp126
Rp127
sbsa(dp128
g14
I00
sg15
(lp129
I746
aI25
asg17
(itiddlywiki
Tiddler
p130
(dp131
g21
V<<set $currentLoops = []>>\u005c\u000a<<set $loud_meow = "cat_scream.mp3">>\u005c\u000a[[<- quieter & louder|quieter]]<div align="right">[[Back to intro|Start]]</div>\u005c\u000a\u000a<h2>jumpscare</h2>\u005c\u000a{{{<<jumpscare>>}}} plays a clip at the current system volume, regardless of whether the reader turned the story volume down.\u000a\u000aThis macro does NOT change the system volume. If the reader has their system volume down to two bars, the jumpscare sound will play at the full two bars' worth of volume.\u000a\u000aEven so, PLEASE WARN YOUR READERS BEFORE USING JUMPSCARE. Providing a warning about possible jump scares at the beginning of your story will\u000a\u000a<ul>\u005c\u000a<li>Increase suspense</li>\u000a<li>Increase/maintain reader goodwill toward Twine in general</li>\u000a<li>Prevent lawsuits</li>\u000a<li>Prevent me from feeling guilty for providing this macro</li>\u000a</ul>\u005c\u000a\u000aPlease use jumpscare responsibly.\u000a\u000aJump Scare: <<button "Reeeowwwr!">><<jumpscare $loud_meow>><</button>>\u000a\u000aThat's everything!\u000a\u000a<<display "questions">>\u000a\u000aEnjoy, and happy Twining.\u000a\u000a\u000a\u000a[[<- quieter & louder|quieter]]<div align="right">[[Back to intro|Start]]</div>\u000a
p132
sg23
Vjumpscare
p133
sg25
g26
((I2014
I10
I1
I0
I23
I58
I2
I274
I1
tp134
(dp135
tp136
Rp137
sg31
(lp138
sg33
g26
((I2014
I9
I25
I13
I45
I2
I3
I268
I1
tp139
(dp140
tp141
Rp142
sbsa(dp143
g14
I01
sg15
(lp144
F14.0
aF434.0
asg17
(itiddlywiki
Tiddler
p145
(dp146
g21
V//    sqTwineSound HTML5 Sound Macro Suite\u000a//    Copyright 2014 Tory Hoke\u000a//\u000a//    This program is free software: you can redistribute it and/or modify\u000a//    it under the terms of the GNU General Public License as published by\u000a//    the Free Software Foundation, either version 3 of the License, or\u000a//    (at your option) any later version.\u000a//\u000a//    This program is distributed in the hope that it will be useful,\u000a//    but WITHOUT ANY WARRANTY; without even the implied warranty of\u000a//    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\u000a//    GNU General Public License for more details.\u000a//\u000a//    You should have received a copy of the GNU General Public License\u000a//    along with this program.  If not, see <http://www.gnu.org/licenses/>.\u000a//\u000a//     http://www.sub-q.com\u000a//     @toryhoke\u000a//\u000a//     Download/Documentation\u000a//         https://github.com/AteYourLembas/sqTwineSound\u000a//\u000a//     FAQ / Q & A\u000a//         http://sub-q.com/stackfauxchange\u000a//\u000a//     Feature Requests\u000a//         http://sub-q.com/forum/features\u000a//\u000a//\u000a// This suite based on Twine: HTML5 sound macros \u000a// by Leon Arnott of Glorious Trainwrecks\u000a// the content and influence of which appear\u000a// under a Creative Commons CC0 1.0 Universal License\u000a//     http://www.glorioustrainwrecks.com/node/5061\u000a//\u000a//\u000a// If this JavaScript code is minimized, you're probably not reading this.\u000a// Even so, here is the tool that makes code beautiful again:\u000a//     http://jsbeautifier.org\u000a//\u000a// If you're getting ready to use this script and want it minimized\u000a// for download efficiency:\u000a//     http://jscompress.com/\u000a//\u000a// If you're making changes to this script and want to check it\u000a// for common errors:\u000a//     http://jshint.com/\u000a//\u000a//\u000a//\u000a// This suite contains the following macros\u000a//\u000a//     playsound, playsounds, updatevolume,\u000a//     pausesound, pauseallsound, \u000a//     stopsound, stopallsound\u000a//     loopsound, unloopsound\u000a//     fadeinsound, fadeinsounds, fadeoutsound, fadeoutsounds\u000a//     quieter, louder\u000a//     jumpscare\u000a//\u000a//     PLEASE GIVE YOUR READER A STARTLE WARNING BEFORE USING JUMPSCARE!\u000a//\u000a//\u000a//\u000a\u000a(function () {\u000a    version.extensions.soundMacros = {\u000a        major: 0,\u000a        minor: 8,\u000a        revision: 0\u000a    };\u000a\u000a    var globalVolume = 1.0;\u000a    var updateInterval = 10; //Update sound volume, etc. once every 10 ms\u000a    var minVolume = 0.01; // Minimum possible volume -- 0 is mute, so we want somethings slightly above that\u000a    var soundInterval = 0.1; // Creates an interval of 1/10 creates ten stages of loudness. Used by quieter/louder. Feel free to tweak\u000a    var fileExtensions = ["ogg", "mp3", "wav", "webm"]; // Acceptable file extensions for audio\u000a    var clips = {};\u000a\u000a\u000a    //------------- pausableTimeout ---------\u000a    //--------------------------------------\u000a    function pausableTimeout(func, params) {\u000a\u000a      this.funcToRun = func;\u000a      this.waitStartTime = -1;\u000a      this.waitEndTime = -1;\u000a      this.waitDuration = -1;\u000a\u000a      this.activate = function(waitDuration) {\u000a\u000a        if (this.pausedAt !== undefined) { this.waitDuration = this.timeRemaining(); }\u000a        else if (waitDuration !== undefined) this.waitDuration = waitDuration;\u000a        else if (this.waitDuration > -1 ) { console.log("Warning: No wait duration given to pausableTimeout. Using last specified one."); }\u000a        else return; // Don't bother to start a loop with no wait duration\u000a\u000a        this.waitStartTime = new Date().getTime();\u000a        this.waitEndTime = new Date().getTime() + this.waitDuration;\u000a        this.timeout = setTimeout(this.funcToRun, this.waitDuration, params);\u000a      };\u000a\u000a      this.deactivate = function() {\u000a        this.pausedAt = this.timeElapsed();\u000a        if (this.timeout !== undefined) clearTimeout(this.timeout);\u000a      };\u000a\u000a      this.stopAndClear = function() {\u000a        if (this.pausedAt !== undefined) delete this.pausedAt;\u000a        if (this.timeout !== undefined) { clearTimeout(this.timeout); delete this.timeout; }\u000a      };\u000a\u000a      this.timeElapsed = function() {\u000a        return new Date().getTime() - this.waitStartTime;\u000a      };\u000a\u000a      this.timeRemaining = function() {\u000a        if (this.pausedAt !== undefined) return this.waitDuration - this.pausedAt;\u000a        return this.waitEndTime - new Date().getTime();\u000a      };\u000a    }\u000a    //------------- /pausableTimeout --------\u000a    //--------------------------------------\u000a\u000a\u000a    //------------- sqAudio ----------------\u000a    //--------------------------------------\u000a    function sqAudio(clipName, fileExt) {\u000a\u000a        this.clipName = clipName; // Let a clip know its own name\u000a        this.fileExt = fileExt;\u000a\u000a        // Defaults\u000a        this.volumeProportion = 1.0; // By default, full volume\u000a        this.overlap = 1000; // By default, 1000 ms (1 second)\u000a        this.isPlayable = false; // Assume audio is not playable\u000a        this.looping = false; // Assume audio not looping\u000a        this.alternate = false;\u000a        this.mainAudio = new Audio();\u000a        this.partnerAudio = new Audio();\u000a\u000a        this.mainAudio.setAttribute("src", this.clipName + "." + this.fileExt);\u000a        if (this.mainAudio.canPlayType) {\u000a            for (var i = -1; i < fileExtensions.length; i += 1) {\u000a                if (i >= 0) fileExt = fileExtensions[i];\u000a                if (this.mainAudio.canPlayType("audio/" + fileExt)) break;\u000a            }\u000a            if (i < fileExtensions.length) {\u000a                this.mainAudio.interval = null;\u000a                this.partnerAudio.setAttribute("src", this.clipName + "." + this.fileExt);\u000a                this.partnerAudio.interval = null;\u000a                this.isPlayable = true;\u000a\u000a            } else {\u000a              console.log("Browser can't play '" + this.clipName + "'");\u000a            }\u000a        }   \u000a\u000a        // Convenience method for getting duration\u000a        // TODO : protect this against audio not being loaded yet\u000a        //\u000a        this.getDuration = function () {\u000a            return this.mainAudio.duration;\u000a        };\u000a\u000a        // Get what we consider the current audio track\u000a        //\u000a        this._getActiveAudio = function() {\u000a          return (this.alternate) ? this.partnerAudio : this.mainAudio;\u000a        };\u000a\u000a        // Get what we consider the idle audio track\u000a        //\u000a        this._getIdleAudio = function() {\u000a          return (this.alternate) ? this.mainAudio : this.partnerAudio;\u000a        };\u000a\u000a\u000a        // Perform fade on specified audio\u000a        //\u000a        this.__fadeSound = function(audioObj, fadeIn) {\u000a\u000a          var goalVolume = globalVolume * this.volumeProportion;\u000a          var tempVolume = audioObj.volume;\u000a          var increment = ((goalVolume * updateInterval) / this.overlap) * (fadeIn ? 1 : -1);\u000a\u000a          audioObj.interval = setInterval(function() {\u000a\u000a              // If you ever want to start/end at a volume other than zero, change goalVolume in the line below to be abs(goalVolume-startVolume) or some such\u000a              //\u000a              tempVolume = Math.min(goalVolume, Math.max(0, tempVolume + increment));\u000a\u000a              //Easing (increment, startpoint, endpoint) chooses the next friendly value between the given min and max; prevents sound popping in or out\u000a              //\u000a              audioObj.volume = Math.easeInOut(tempVolume, 0, goalVolume); \u000a            \u000a              if (tempVolume === 0 || tempVolume === goalVolume) clearInterval(audioObj.interval);\u000a\u000a              //This effectively stops the loop and poises the volume to be played again\u000a              //That way the clip isn't needlessly looping when no one can hear it.\u000a              if (tempVolume === 0) {\u000a                  audioObj.pause();\u000a                  audioObj.currentTime = 0;\u000a                  // This is usually redundant, as playsound() adjusts the volume before playing, but better safe than sorry.\u000a                  audioObj.volume = goalVolume;\u000a              }\u000a          }, updateInterval);\u000a        };\u000a\u000a\u000a        // Manages starting one loop before the last play has ended\u000a        // and cross-fading the ends\u000a        //\u000a        this._crossfadeLoop = function(params) {\u000a\u000a          var sqAudioObj = params[0];\u000a          var currAudioObj = params[1];\u000a\u000a          // Let loop expire if no longer looping\u000a          //\u000a          if (!sqAudioObj.looping) { return; }\u000a\u000a          var nextAudioObj = sqAudioObj.alternate ? sqAudioObj.mainAudio : sqAudioObj.partnerAudio;\u000a          sqAudioObj.alternate = !sqAudioObj.alternate;\u000a\u000a          // fade out current sound\u000a          //\u000a          sqAudioObj.__fadeSound(currAudioObj, false);\u000a\u000a          // And fade in our partner\u000a          //\u000a          nextAudioObj.currentTime = 0;\u000a          nextAudioObj.volume = globalVolume * sqAudioObj.volumeProportion;\u000a          nextAudioObj.play();       \u000a          sqAudioObj.__fadeSound(nextAudioObj, true);\u000a\u000a          // Kick off the next timer to crossfade\u000a          // Might as well garbage collect the old crossfadeTimeout, too.\u000a          //\u000a          if (sqAudioObj.crossfadeTimeout !== undefined) { sqAudioObj.crossfadeTimeout.stopAndClear(); delete sqAudioObj.crossfadeTimeout; }\u000a          if (isNaN(sqAudioObj.getDuration())) { this.error("Can't loop because duration is not known (audio not loaded, probably not found.)"); return; }\u000a          sqAudioObj.crossfadeTimeout = new pausableTimeout(sqAudioObj._crossfadeLoop, [sqAudioObj, nextAudioObj]); \u000a          sqAudioObj.crossfadeTimeout.activate(sqAudioObj.getDuration()*1000-sqAudioObj.overlap);\u000a\u000a        };\u000a\u000a\u000a        this._fadeSound = function(activeAudioObj, fadeIn) {\u000a\u000a          // Set the goal volume as a proportion of the global volume\u000a          // (e.g. if global volume is 0.4, and volume proportion is 0.25, overall the goal volume is 0.1)\u000a          //\u000a          var goalVolume = globalVolume * this.volumeProportion;\u000a          if (activeAudioObj.interval) clearInterval(activeAudioObj.interval);\u000a          if (fadeIn) {\u000a              if (activeAudioObj.currentTime > 0) activeAudioObj.currentTime = 0;\u000a              activeAudioObj.volume = 0;  \u000a              this.loop();\u000a\u000a          } else {\u000a\u000a              if (!activeAudioObj.currentTime) return;\u000a              activeAudioObj.volume = goalVolume;\u000a              activeAudioObj.play();\u000a          }\u000a          this.__fadeSound(activeAudioObj, fadeIn);\u000a\u000a        };\u000a\u000a\u000a        // Fade sound on whatever the active audio is\u000a        //\u000a        this.fadeSound = function(fadeIn) {\u000a            if (fadeIn) this.stopAndClear();\u000a            else this.looping = false;\u000a            this._fadeSound(this._getActiveAudio(), fadeIn);\u000a        };\u000a\u000a        // Update volume proportion and volume of both audio clips\u000a        //\u000a        this.updateVolumeProportion = function(volumeProportion) {\u000a            this.volumeProportion = volumeProportion;\u000a            this.updateVolume();\u000a        };\u000a\u000a        // Update volume of both audio clips (assumes vol proportion and global vol already set)\u000a        //\u000a        this.updateVolume = function() {\u000a            this.mainAudio.volume = this.partnerAudio.volume = globalVolume * this.volumeProportion;\u000a        };\u000a\u000a        // Play the current audio object and reactivate any paused timer\u000a        //\u000a        this.play = function(loop) {\u000a\u000a          //If it's a loop we want, just loop and don't make a big deal out of it\u000a          if (loop) this.loop();\u000a\u000a          else {\u000a\u000a            var activeAudioObj = this._getActiveAudio();\u000a            if (activeAudioObj) {  \u000a                this.updateVolume();\u000a                activeAudioObj.play();\u000a              }\u000a          }\u000a        };\u000a\u000a        // Pause whatever audio is currently playing and pause the timer, too\u000a        //\u000a        this.pause = function() {\u000a          this._getActiveAudio().pause();\u000a          if (this.crossfadeTimeout !== undefined) this.crossfadeTimeout.deactivate();\u000a        };\u000a\u000a        // Stop whatever audio is currently playing and dump the timer\u000a        //\u000a        this.stopAndClear = function() {\u000a          var activeAudioObj = this._getActiveAudio();\u000a          activeAudioObj.pause();\u000a          if (activeAudioObj.currentTime) activeAudioObj.currentTime = 0;\u000a          if (this.crossfadeTimeout !== undefined) { this.crossfadeTimeout.stopAndClear(); delete this.crossfadeTimeout; }\u000a        };\u000a\u000a\u000a        // Loop the track\u000a        //\u000a        this.loop = function() {\u000a\u000a            this.looping = true;\u000a            var activeAudioObj = this._getActiveAudio();\u000a\u000a            // Create new timeout if one does not already exist; otherwise just reuse the existing one\u000a            //\u000a            this.crossfadeTimeout = (this.crossfadeTimeout === undefined) ? new pausableTimeout(this._crossfadeLoop, [this, activeAudioObj]) : this.crossfadeTimeout; \u000a            if (isNaN(this.getDuration())) { this.error("Can't loop because duration is not known (audio not loaded, probably not found.)"); return; }\u000a            this.crossfadeTimeout.activate((this.getDuration()*1000)-this.overlap);\u000a            activeAudioObj.play();\u000a        };\u000a\u000a\u000a    }\u000a    //------------ /sqAudio ----------------\u000a    //--------------------------------------\u000a\u000a\u000a\u000a    /***********************************************************\u000a    *   MAIN METHOD\u000a    /***********************************************************\u000a    /\u000a    /  Here be monsters. Proceed with caution.\u000a    /\u000a    */\u000a\u000a    // Verify that the audio can be played in browser\u000a    //\u000a    function parseAudio(c, e) {\u000a\u000a        var d = c.exec(div.innerHTML); // returns list of form ["accordion.mp3",accordion,mp3]\u000a\u000a        while(d) {\u000a            if (d) {\u000a\u000a                if (!clips.hasOwnProperty(d[1])) {\u000a                  var sqAudioObj = new sqAudio(d[1].toString(), d[2].toString());\u000a                  if (sqAudioObj.isPlayable) clips[d[1].toString()] = sqAudioObj;\u000a                }\u000a            }\u000a            d = c.exec(div.innerHTML); // yes, we could just do a do/while, but some envs don't like that\u000a        }\u000a    }\u000a\u000a    // Parse all used audio file names\u000a    // Use whatever store area element is available in the story format\u000a    //\u000a    var storeElement = (document.getElementById("store-area") ? document.getElementById("store-area") : document.getElementById("storeArea"));\u000a    var div = storeElement.firstChild;\u000a    while (div) {\u000a        var b = String.fromCharCode(92);\u000a        var q = '"';\u000a        var re = "['" + q + "]([^" + q + "']*?)" + b + ".(" + fileExtensions.join("|") + ")['" + q + "]";\u000a        parseAudio(new RegExp(re, "gi"));\u000a        div = div.nextSibling;\u000a    }\u000a    /***********************************************************\u000a    *   END MAIN METHOD\u000a    /***********************************************************/\u000a\u000a\u000a\u000a    /***********************************************************\u000a    *   SUPPORTING FUNCTIONS FOR THE MACROS\u000a    /***********************************************************\u000a    /\u000a    /  Here be monsters. Proceed with caution.\u000a    /\u000a    */\u000a\u000a    // Given the clipName, get the active soundtrack\u000a    //\u000a    function getSoundTrack(clipName) {\u000a        clipName = clipName.toString();\u000a        clipName = clipName.lastIndexOf(".") > -1 ? clipName.slice(0, clipName.lastIndexOf(".")) : clipName;\u000a        return clips[clipName];\u000a    }\u000a\u000a    \u000a    // Centralized function for fading multiple sounds\u000a    //\u000a    function loopSounds(loopNameString, fadeIn, volumeProportion, overlap) {\u000a\u000a        // loopNameString will be an object like "some.mp3,this.mp3"\u000a        // Convert to a string and break into pieces\u000a        // Don't bother converting to audio clip at this point--\u000a        // the call to fadeSound() will take care of that\u000a        //\u000a        var loopNames = loopNameString.split(",");\u000a        for (var index in loopNames) {\u000a          if (loopNames.hasOwnProperty(index)) {\u000a              var loopName = loopNames[index];\u000a              loopName = loopName.lastIndexOf(".") > -1 ? loopName.slice(0, loopName.lastIndexOf(".")) : loopName;\u000a\u000a              if (volumeProportion !== undefined) this.getSoundTrack(loopName).updateVolumeProportion(volumeProportion);\u000a              if (overlap !== undefined) this.getSoundTrack(loopName).overlap = overlap;\u000a\u000a              if (fadeIn) fadeSound(this.getSoundTrack(loopName));\u000a              else this.getSoundTrack(loopName).loop();\u000a          }\u000a        }\u000a    }\u000a\u000a\u000a    // Centralized function for sound fading\u000a    //\u000a    function fadeSound(clipName, fadeIn) {\u000a\u000a      var soundtrack = getSoundTrack(clipName);\u000a      if (soundtrack === "undefined") { return this.error("audio clip " + clipName + " not found"); } \u000a      soundtrack.fadeSound(fadeIn);\u000a      \u000a    }\u000a\u000a\u000a    // Adjust the volume of ALL audio in the page\u000a    //\u000a    function adjustVolume(direction) {\u000a\u000a        // Note soundInterval and minVolume are declared globally (at top of the script)\u000a        var maxVolume = 1.0; // This is native to JavaScript. Changing will cause unexpected behavior\u000a        globalVolume = Math.max(minVolume, Math.min(maxVolume, globalVolume + (soundInterval * direction)));\u000a\u000a        for (var soundIndex in clips) {\u000a            if (clips.hasOwnProperty(soundIndex)) {\u000a                clips[soundIndex].updateVolume();\u000a            }\u000a        }\u000a    }\u000a\u000a    // Common argument management\u000a    //\u000a    function manageTripleArgs(func) {\u000a          if (func.args.length < 1) { return func.error("no audio clip name specified"); }    \u000a          if (func.args.length > 1) { \u000a            if (typeof func.args[1] == "number") {\u000a              if (func.args[1] > 1.0 || func.args[1] < 0.0) { return func.error("Volume proportion (second argument) must be a decimal number no smaller than 0.0 and no bigger than 1.0"); }\u000a            } else { return func.error("Volume proportion (second argument) must be a decimal number (between 0.0 and 1.0)"); }\u000a          }\u000a          if (func.args.length > 2) { \u000a            if (typeof func.args[2] !== "number") { return func.error("Fade duration (third argument) must be a number indicating milliseconds (defaults to 1000 ms aka 1 second)"); }\u000a          } \u000a          if (func.args.length > 3) { \u000a            if (typeof func.args[3] !== "boolean") { return func.error("Whether to loop (fourth argument) must be a boolean (true or false)"); }\u000a          } \u000a    }\u000a\u000a\u000a  /***********************************************************\u000a  *   END SUPPORTING FUNCTIONS FOR THE MACROS\u000a  /***********************************************************/\u000a\u000a\u000a\u000a  /***********************************************************\u000a  /***********************************************************\u000a  *   MACROS\u000a  /***********************************************************\u000a  /***********************************************************\u000a  */\u000a\u000a    /* <<updatevolume $backgroundMusic 0.5>>\u000a    /\u000a    / Given a decimal between 0.0 and 1.0, \u000a    / updates the clip's volume proportion and the clip's actual volume\u000a    /\u000a    */\u000a    macros.add("updatevolume", {\u000a        handler: function () {\u000a          \u000a          if (this.args.length < 2) {\u000a            var errors = [];\u000a            if (this.args.length < 1) { errors.push("audio clip name"); }\u000a            if (this.args.length < 2) { errors.push("volume proportion"); }\u000a            return this.error("no " + errors.join(" or ") + " specified");\u000a          }\u000a          if (typeof this.args[1] == "number") {\u000a            if (this.args[1] > 1.0 || this.args[1] < 0.0) { return this.error("Volume proportion (second argument) must be a decimal number no smaller than 0.0 and no bigger than 1.0"); }\u000a          } else { return this.error("Volume proportion (second argument) must be a decimal number (between 0.0 and 1.0)"); }\u000a          \u000a          var loopName = this.args[0].toString();\u000a          var volumeProportion = parseFloat(this.args[1]);\u000a          var clipName = loopName.lastIndexOf(".") > -1 ? loopName.slice(0, loopName.lastIndexOf(".")) : loopName;\u000a\u000a          clips[clipName].updateVolumeProportion(volumeProportion);\u000a        }\u000a    });\u000a\u000a    /**\u000a     * <<playsound "meow.mp3">> OR <<playsound "meow" 0.8>> OR <<playsound $meow 0.8 true>> OR <<playsound $meow 0.8 true 200>>\u000a     *\u000a     *  This version of the macro lets you do a little bit of sound mixing.\u000a     *\u000a     *  This macro requires a sound clip name\u000a     *\u000a     *  In addition, you may give it (in this order, please)\u000a     *\u000a     *  OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)\u000a     *  OPTIONAL: number of milliseconds to overlap/crossfade the loop (1000 ms aka 1 sec by default)\u000a     *  OPTIONAL: true if you'd like to loop, false if no\u000a     *\u000a     #  So this plays a clip normally, at full global volume\u000a     *\u000a     *      <<playsound $walla">>\u000a     *\u000a     *  OR this fades in a quiet background $walla that will loop and crossfade with 2000 ms (2 seconds) of overlap:\u000a     *\u000a     *      <<playsound $walla 0.2 2000 true>>\u000a     *\u000a     *  And this plays a louder $meow on top:\u000a     *\u000a     *      <<playsound $meow 1.0>>\u000a     *\u000a     *\u000a     */\u000a    macros.add("playsound", {\u000a      handler : function () {\u000a\u000a          manageTripleArgs(this);\u000a\u000a          var soundtrack = getSoundTrack(this.args[0]);\u000a          var volumeProportion = this.args.length > 1 ? this.args[1] : soundtrack.volumeProportion;\u000a          var loop = this.args.length > 3 ? this.args[3] : false;\u000a          soundtrack.overlap = this.args.length > 2 ? parseInt(this.args[2]) : 0;\u000a          soundtrack.updateVolumeProportion(volumeProportion);\u000a          soundtrack.play(loop); \u000a        }\u000a    });\u000a\u000a\u000a    /* <<playsounds ["moodMusic.mp3", "footsteps.mp3"]>>\u000a    /  OR IDEALLY\u000a    /  <<set $spookySounds = [$moodMusic, $footSteps]>>\u000a    /  <<playsounds $spookySounds>>\u000a    /\u000a    / Play multiple sounds at once (picking up where we left off)\u000a     *\u000a     *  This macro requires a sound clip name\u000a     *\u000a     *  In addition, you may give it (in this order, please)\u000a     *\u000a     *  OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)\u000a     *  OPTIONAL: number of milliseconds to fade (0 ms by default)\u000a     *  OPTIONAL: true if you'd like to loop, false if no\u000a     *    \u000a    /\u000a    */\u000a    macros.add("playsounds", {\u000a        handler: function () {\u000a\u000a          manageTripleArgs(this);\u000a\u000a          var clipNames = this.args[0].toString().split(",");\u000a          for (var index in clipNames) {\u000a            if (clipNames.hasOwnProperty(index)) {\u000a                var soundtrack = getSoundTrack(clipNames[index]);\u000a                var volumeProportion = this.args.length > 1 ? this.args[1] : soundtrack.volumeProportion;\u000a                var loop = this.args.length > 3 ? this.args[3] : false;\u000a                soundtrack.overlap = this.args.length > 2 ? parseInt(this.args[2]) : 0;\u000a                soundtrack.updateVolumeProportion(volumeProportion);\u000a                soundtrack.play(loop); \u000a            }\u000a          }\u000a        }\u000a    });\u000a\u000a\u000a\u000a    /* <<pausesound "backgroundMusic.ogg">> \u000a    /\u000a    /  Pauses "backgroundMusic.ogg" at its current location. \u000a    /  Use <<playsound "trees.ogg" >> to resume it.\u000a    */  \u000a    macros.add("pausesound", {\u000a      handler: function() {\u000a        if (this.args.length < 1) { return this.error("no audio clip name specified"); }                  \u000a        getSoundTrack(this.args[0]).pause();\u000a      }\u000a    });\u000a\u000a\u000a    /* <<pauseallsound>> \u000a    /\u000a    /  Pauses all sounds at their current location. \u000a    /\u000a    /  If you'd like the option to start multiple sounds,\u000a    /  take a look at the "fadeinsounds" macro\u000a    */ \u000a    macros.add("pauseallsound", {\u000a      handler: function () {\u000a        for (var clipName in clips) {\u000a          if (clips.hasOwnProperty(clipName)) {\u000a            if (clips[clipName] !== undefined) clips[clipName].pause();\u000a          }\u000a        }\u000a      }\u000a    });\u000a\u000a    /* <<stopsound $backgroundMusic>>\u000a    / \u000a    /  Stop the given sound immediately\u000a    /  If the sound is played again, it will play from the beginning\u000a    */    \u000a    macros.add("stopsound", {\u000a      handler: function() {\u000a        if (this.args.length < 1) { return this.error("no audio clip name specified"); }                          \u000a        getSoundTrack(this.args[0]).stopAndClear();\u000a      }\u000a    });\u000a\u000a\u000a    /* <<stopallsound>>\u000a    / \u000a    /  Stops all sounds immediately.\u000a    /  If any stopped sound is played again, it will play from the beginning\u000a    /\u000a    /  If you'd like the option to start multiple sounds,\u000a    /  take a look at the "fadeinsounds" macro\u000a    */ \u000a    macros.add("stopallsound", {\u000a        handler: function () {\u000a          for (var clipName in clips) {\u000a            if (clips.hasOwnProperty(clipName)) {\u000a              if (clips[clipName] !== undefined) clips[clipName].stopAndClear();\u000a            }\u000a          }\u000a        }\u000a    });\u000a\u000a    /* <<loopsound "backgroundMusic.mp3">>\u000a    /  \u000a    /  Starts playing the given clip on repeat.\u000a    /  Note that browsers will not necessarily play looping audio seamlessly.\u000a    /  For seamless audio, use a fade duration/overlap (third parameter) greater than zero\u000a    /\u000a     *  This macro requires a sound clip name\u000a     *    \u000a     *  OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)\u000a     *  OPTIONAL: number of milliseconds to overlap/crossfade the loop (0 by default)\u000a    */    \u000a    macros.add("loopsound", {\u000a        handler: function () {\u000a          \u000a          manageTripleArgs(this);\u000a\u000a          var soundtrack = getSoundTrack(this.args[0]);\u000a          var volumeProportion = this.args.length > 1 ? this.args[1] : soundtrack.volumeProportion;\u000a          soundtrack.overlap = this.args.length > 2 ? parseInt(this.args[2]) : 0;\u000a          soundtrack.updateVolumeProportion(volumeProportion);\u000a          soundtrack.loop();\u000a       }\u000a    });\u000a\u000a\u000a    /* <<unloopsound $heartbeat>>\u000a    /\u000a    /  Let the given sound stop when it finishes its current loop\u000a    /  (so the sound no longer repeats.)\u000a    */ \u000a    macros.add("unloopsound", {\u000a        handler: function () {\u000a          if (this.args.length < 1) { return this.error("no audio clip name specified"); }          \u000a          getSoundTrack(this.args[0]).looping = false;\u000a       }\u000a    });\u000a\u000a\u000a    /* <<fadeinsound "heartbeat.mp3">>\u000a    /\u000a    / Identical to loopsound, but fades in the sound over 2 seconds.\u000a    /\u000a     *  This macro requires a sound clip name\u000a     *    \u000a     *  OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)\u000a     *  OPTIONAL: number of milliseconds to overlap/crossfade the loop (1000 ms aka 1 sec by default)\u000a    /\u000a    */\u000a    macros.add("fadeinsound", {\u000a        handler: function () {\u000a\u000a          manageTripleArgs(this);\u000a        \u000a          var soundtrack = getSoundTrack(this.args[0]);\u000a          var volumeProportion = this.args.length > 1 ? this.args[1] : soundtrack.volumeProportion; \u000a          soundtrack.overlap = this.args.length > 2 ? parseInt(this.args[2]) : soundtrack.overlap;\u000a          soundtrack.updateVolumeProportion(volumeProportion);\u000a          soundtrack.fadeSound(true);\u000a        }\u000a    });\u000a\u000a    /* <<fadeinsounds ["moodMusic.mp3", "footsteps.mp3"]>>\u000a    /  OR IDEALLY\u000a    /  <<set $spookySounds = [$moodMusic, $footSteps]>>\u000a    /  <<fadeinsounds $spookySounds>>\u000a    /\u000a    / Fade in multiple sounds at once.\u000a    /\u000a     *  This macro requires a sound clip name\u000a     *    \u000a     *  OPTIONAL: decimal proportion of volume (0.0 being minimum/mute, and 1.0 being maximum/default)\u000a     *  OPTIONAL: number of milliseconds to overlap/crossfade the loop (1000 ms aka 1 sec by default)\u000a    /\u000a    */\u000a    macros.add("fadeinsounds", {\u000a        handler: function () {\u000a\u000a          manageTripleArgs(this);\u000a\u000a          var volumeProportion = this.args.length > 1 ? this.args[1] : undefined; \u000a          var overlap = this.args.length > 2 ? parseInt(this.args[2]) : undefined;\u000a          loopSounds(this.args[0].toString(), true, volumeProportion, overlap);\u000a        }\u000a    });\u000a\u000a    /* <<fadeoutsound $birdsong>>\u000a    /\u000a    / Identical to stopsound, but fades out the sound over the stored fade duration (overlap).\u000a    /\u000a    */\u000a    macros.add("fadeoutsound", {\u000a        handler: function () {\u000a          if (this.args.length < 1) { return this.error("no audio clip name specified"); }          \u000a          fadeSound(this.args[0].toString(), false);\u000a        }\u000a    });\u000a\u000a\u000a    /* <<fadeoutsounds ["moodMusic.mp3", "footsteps.mp3"]>>\u000a    /  OR IDEALLY\u000a    /  <<set $spookySounds = [$moodMusic, $footSteps]>>\u000a    /  <<fadeoutsounds $spookySounds>>\u000a    /\u000a    / Fade out multiple sounds at once.\u000a    /\u000a    */\u000a    macros.add("fadeoutsounds", {\u000a        handler: function () {\u000a          if (this.args.length < 1) { return this.error("no audio clip name specified"); }          \u000a          loopSounds(this.args[0].toString(), false);\u000a        }\u000a    });\u000a\u000a\u000a    /* <<quieter>>\u000a    /\u000a    / Reduces the story's globalVolume by 1/10th of the reader's system volume.\u000a    / Thus creates a 10-unit volume range for the story\u000a    /\u000a    */\u000a    macros.add("quieter", {\u000a        handler: function () {\u000a            adjustVolume(-1);\u000a        }\u000a    });\u000a\u000a    /* <<louder>>\u000a    /\u000a    / Increases the story's globalVolume by 1/10th of the reader's system volume.\u000a    / Thus creates a 10-unit volume range for the story\u000a    /\u000a    */\u000a    macros.add("louder", {\u000a        handler: function () {\u000a            adjustVolume(1);\u000a        }\u000a    });\u000a\u000a\u000a    /* <<jumpscare "scream.mp3">>\u000a    /\u000a    / Play the clip at maximum story volume\u000a    / Don't affect any stored volume options\u000a    / PLEASE GIVE THE READER A STARTLE WARNING BEFORE USING THIS.\u000a    /\u000a    */\u000a    macros.add("jumpscare", {\u000a      handler: function () {\u000a\u000a          var soundtrack = getSoundTrack(this.args[0]);\u000a          soundtrack.updateVolumeProportion(1.0);\u000a          soundtrack.play();\u000a      }\u000a    });\u000a\u000a  /***********************************************************\u000a  *   END MACROS\u000a  /***********************************************************/\u000a\u000a\u000a\u000a}());\u000a\u000a// You read the whole thing! THAT'S PRETTY RAD. Keep up the good work, and happy Twining.\u000a\u000a
p147
sg23
VsqTwineSound HTML5 Sound Macros 0.8.0
p148
sg25
g26
((I2014
I10
I1
I0
I41
I25
I2
I274
I1
tp149
(dp150
tp151
Rp152
sg31
(lp153
Vscript
p154
asg33
g26
((I2014
I9
I25
I14
I26
I30
I3
I268
I1
tp155
(dp156
tp157
Rp158
sbsa(dp159
g14
I00
sg15
(lp160
I778
aI534
asg17
(itiddlywiki
Tiddler
p161
(dp162
g21
V<table>\u005c\u000a<tr><td>Fade in Music at 1/4 Volume w/crossfade: </td><td><<button "Fade In">><<set $currentLoops.push($background_music)>><<fadeinsound $background_music 0.25 80>><</button>></td></tr>\u005c\u000a<tr><td>Unloop Music: </td><td><<button "Unloop">><<set $currentLoops.splice($currentLoops.indexOf($background_music),1)>>\u005c\u000a<<unloopsound $background_music>><</button>></td></tr>\u005c\u000a<tr><td>Fade Out Music: </td><td><<button "Fade Out">><<set $currentLoops.splice($currentLoops.indexOf($background_music),1)>>\u005c\u000a<<fadeoutsound $background_music>><</button>></td></tr>\u005c\u000a<tr><td>Pause Music: </td><td><<button "||">><<pausesound $background_music>><</button>></td></tr>\u000a<tr><td>Play (pick up where we left off): </td><td><<button "|>">><<set $currentLoops.push($background_music)>><<playsound $background_music>><</button>></td></tr>\u005c\u000a<tr><td>Stop Music: </td><td><<button "[]">><<set $currentLoops.splice($currentLoops.indexOf($background_music),1)>>\u005c\u000a<<stopsound $background_music>><</button>></td></tr>\u005c\u000a</table>\u005c
p163
sg23
Vsingle loop controls
p164
sg25
g26
((I2014
I9
I30
I19
I21
I9
I1
I273
I1
tp165
(dp166
tp167
Rp168
sg31
(lp169
sg33
g26
((I2014
I9
I25
I15
I8
I13
I3
I268
I1
tp170
(dp171
tp172
Rp173
sbsa(dp174
g14
I00
sg15
(lp175
F774.0
aF681.0
asg17
(itiddlywiki
Tiddler
p176
(dp177
g21
V<table>\u005c\u000a<tr><td>Fade in Footsteps at 3/4 volume w/ 2 second fade: </td><td><<button "Fade in">><<set $currentLoops.push($footsteps)>><<fadeinsound $footsteps 0.75 2000>><</button>></td></tr>\u005c\u000a<tr><td>Fade out Footsteps: </td><td><<button "Fade out">><<set $currentLoops.splice($currentLoops.indexOf($footsteps),1)>>\u005c\u000a<<fadeoutsound $footsteps>><</button>></td></tr>\u005c\u000a<tr><td>Fade Out All Current Loops: </td><td><<button "Fade Out All">><<fadeoutsounds $currentLoops>><</button>></td></tr>\u005c\u000a<tr><td>Pause All Sounds : </td><td><<button "*||*">><<pauseallsound>><</button>></td></tr>\u005c\u000a<tr><td>Resume All Current Loops : </td><td><<button "Resume All">><<pauseallsound>><<playsounds $currentLoops>><</button>></td></tr>\u005c\u000a<tr><td>Stop All Sounds : </td><td><<button "*[]*">><<stopallsound>><</button>></td></tr>\u005c\u000a</table>
p178
sg23
Vmultiple loop controls
p179
sg25
g26
((I2014
I9
I30
I19
I19
I31
I1
I273
I1
tp180
(dp181
tp182
Rp183
sg31
(lp184
sg33
g26
((I2014
I9
I25
I15
I37
I20
I3
I268
I1
tp185
(dp186
tp187
Rp188
sbsa(dp189
g14
I00
sg15
(lp190
F162.0
aF282.0
asg17
(itiddlywiki
Tiddler
p191
(dp192
g21
VAll sample sounds acquired from <a href="http://soundbible.com/" target="_blank">soundbible.com</a>.\u000a\u000a<ul>\u000a<li><a href="http://soundbible.com/1954-Cat-Meow-2.html" target="_blank">Soft meow</a></li>\u000a<li><a href="http://soundbible.com/1509-Cat-Scream.html" target="_blank">Cat scream</a></li>\u000a<li><a href="http://soundbible.com/528-Accordion.html" target="_blank">Accordion Music</a></li>\u000a<li><a href="http://soundbible.com/2057-Footsteps-On-Cement.html" target="_blank">Footsteps</a></li>\u000a</ul>\u000a\u000a[[Back to start|Start]]
p193
sg23
Vaudio attribution
p194
sg25
g26
((I2014
I9
I25
I16
I5
I18
I3
I268
I1
tp195
(dp196
tp197
Rp198
sg31
(lp199
sg33
g26
((I2014
I9
I25
I16
I0
I22
I3
I268
I1
tp200
(dp201
tp202
Rp203
sbsa(dp204
g14
I00
sg15
(lp205
I344
aI217
asg17
(itiddlywiki
Tiddler
p206
(dp207
g21
V<h4>More info about these macros</h4>\u005c\u000a<ul><li><a href="https://github.com/AteYourLembas/sqTwineSound">Get the source and more on github</a></li><li><a href="http://sub-q.com/stackfauxchange" target="_blank">FAQ/Q&A</a> (on the sub-Q site)</li>\u000a<li><a href="http://sub-q.com/forum/features" target="_blank">Feature Requests</a> (on the sub-Q site)</li>\u000a<li>If you want a better place to get all your Twine questions answered, help grow the <a href="http://area51.stackexchange.com/proposals/66696/interactive-fiction?referrer=iS6Wrea_mOk1" target="_blank">Interactive Fiction Stack Exchange</a>! Go there now go go go!</li><li>[[Who Is This Person]]?</li></ul>
p208
sg23
Vquestions
p209
sg25
g26
((I2014
I10
I1
I0
I40
I45
I2
I274
I1
tp210
(dp211
tp212
Rp213
sg31
(lp214
sg33
g26
((I2014
I9
I25
I17
I12
I8
I3
I268
I1
tp215
(dp216
tp217
Rp218
sbsa(dp219
g14
I00
sg15
(lp220
I777
aI377
asg17
(itiddlywiki
Tiddler
p221
(dp222
g21
V<<button "[]">><<stopallsound>><</button>>\u005c\u000a<<button "||">><<pauseallsound>><</button>>\u005c\u000a<<button "<)">><<quieter>><</button>>\u005c\u000a<<button "<)))">><<louder>><</button>>\u005c\u000a<<button "|>">><<playsound $background_music 0.5>><</button>>\u005c\u000a<<button "Loop simple">><<loopsound $background_music 0.5>><</button>>\u005c\u000a<<button "Loop w/crossfade">><<fadeinsound $background_music 0.5 80>><</button>>
p223
sg23
Vcommon controls
p224
sg25
g26
((I2014
I9
I30
I16
I57
I8
I1
I273
I1
tp225
(dp226
tp227
Rp228
sg31
(lp229
sg33
g26
((I2014
I9
I25
I18
I6
I18
I3
I268
I1
tp230
(dp231
tp232
Rp233
sbsa(dp234
g14
I00
sg15
(lp235
I17
aI720
asg17
(itiddlywiki
Tiddler
p236
(dp237
g21
V/* Your story will use the CSS in this passage to style the page.\u000aGive this passage more tags, and it will only affect passages with those tags.\u000aExample selectors: */\u000a\u000abody {\u000a	/* This affects the entire page */\u000a	color: #FFF;\u000a	background-color: #587e7e;\u000a	\u000a}\u000a\u000a#ui-bar {\u000a  width: 250px;\u000a\u000a}\u000a\u000a\u000a#passages {\u000a  margin-left: 125px;\u000a  width: 75%;\u000a  min-height: 100%;\u000a  padding-bottom: 0;\u000a  margin-bottom: 0;\u000a  border: 0;\u000a}\u000a\u000a.passage {\u000a	/* This only affects passages */\u000a	font-size: medium;\u000a	\u000a}\u000a.passage a {\u000a	/* This affects passage links */\u000a	color: #F2F5A9;\u000a	\u000a}\u000a.passage a:hover {\u000a	/* This affects links while the cursor is over them */\u000a	\u000a	color: #FFBF00;\u000a\u000a}
p238
sg23
Vmain
p239
sg25
g26
((I2014
I9
I30
I18
I0
I50
I1
I273
I1
tp240
(dp241
tp242
Rp243
sg31
(lp244
Vstylesheet
p245
asg33
g26
((I2014
I9
I25
I20
I41
I53
I3
I268
I1
tp246
(dp247
tp248
Rp249
sbsa(dp250
g14
I00
sg15
(lp251
I188
aI429
asg17
(itiddlywiki
Tiddler
p252
(dp253
g21
VTory Hoke writes, draws, and codes in Los Angeles. Her fiction has appeared in <i>Strange Horizons</i>, <i>LORE</i>, and <i>Three-Lobed Burning Eye<i>, and she has provided illustrations for <i>Strange Horizons</i>, <i>Apex</i>, and Eggplant Literary Productions' <i>Spellbound</i> anthology. She writes the monthly "Chick on the Draw" column for <a href="http://www.lunastationquarterly.com/" target="_blank">Luna Station Quarterly</a>. \u000a\u000aPing her on Twitter <a href="http://www.twitter.com/toryhoke" target="_blank">@toryhoke</a> or at tory at sub-q dot com. 
p254
sg23
VWho Is This Person
p255
sg25
g26
((I2014
I10
I1
I0
I39
I22
I2
I274
I1
tp256
(dp257
tp258
Rp259
sg31
(lp260
sg33
g26
((I2014
I9
I30
I17
I48
I43
I1
I273
I1
tp261
(dp262
tp263
Rp264
sbsasS'scale'
p265
I1
sS'snapping'
p266
I00
ss.